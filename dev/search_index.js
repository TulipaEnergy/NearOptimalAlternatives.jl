var documenterSearchIndex = {"docs":
[{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/TulipaEnergy/NearOptimalAlternatives.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/TulipaEnergy/NearOptimalAlternatives.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a PR to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/TulipaEnergy/NearOptimalAlternatives.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.\nAfter that runs, the stable docs should be updated. Check them and look for the version number.","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#NearOptimalAlternatives.METHOD_DISPATCH_UPDATE","page":"Reference","title":"NearOptimalAlternatives.METHOD_DISPATCH_UPDATE","text":"const METHODDISPATCH shows the mapping of method symbols to their corresponding update functions for the modelling-for-generating-alternatives problem. It is used to dynamically select the appropriate function based on the method specified in the `createalternativegeneratingproblem!` function.\n\n\n\n\n\n","category":"constant"},{"location":"95-reference/#NearOptimalAlternatives.AlternativeSolutions","page":"Reference","title":"NearOptimalAlternatives.AlternativeSolutions","text":"Structure holding the solutions for the near-optimal alternatives.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#NearOptimalAlternatives.MetaheuristicProblem","page":"Reference","title":"NearOptimalAlternatives.MetaheuristicProblem","text":"Structure representing a problem that can be solved by Metaheuristics.jl and the algorithm to solve it.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#NearOptimalAlternatives.Dist_initial!-Union{Tuple{N}, Tuple{T}, Tuple{JuMP.Model, AbstractArray{T, N}, Vector{JuMP.VariableRef}}} where {T<:Union{JuMP.VariableRef, JuMP.AffExpr}, N}","page":"Reference","title":"NearOptimalAlternatives.Dist_initial!","text":"Dist_initial!(\n    model::JuMP.Model,\n    variables::AbstractArray{T,N},\n    fixed_variables::Vector{VariableRef};\n    weights::Vector{Float64} = zeros(length(variables)),\n    metric::Distances.SemiMetric = SqEuclidean(),\n) where {T<:Union{VariableRef,AffExpr},N}\n\nInitialize a JuMP model's objective to maximize the distance between the current solution and a reference solution, based on a specified metric.\n\nThis function is typically used in the context of generating diverse solutions (alternatives) to an optimization problem by first defining a distance-based objective that measures how different a new solution is from an existing (optimal) one.\n\nArguments\n\nmodel::JuMP.Model: a JuMP model that has been previously solved.\nvariables::AbstractArray{T,N}: the variables of the model to consider in the distance computation.\nfixed_variables::Vector{VariableRef}: a subset of all variables of model that are not allowed to be changed when seeking for alternatives.\nweights::Vector{Float64}: optional weights to influence the distance calculation (currently not used directly but reserved for extensions).\nmetric::Distances.SemiMetric: the distance metric used to compute dissimilarity (default is squared Euclidean distance).\n\nBehavior\n\nExtracts the current solution values of variables.\nSets the model's objective to maximize the distance between the current variable values and the solution.\nChanges the model's objective sense to Max.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.Dist_update!-Union{Tuple{N}, Tuple{T}, Tuple{JuMP.Model, AbstractArray{T, N}}} where {T<:Union{JuMP.VariableRef, JuMP.AffExpr}, N}","page":"Reference","title":"NearOptimalAlternatives.Dist_update!","text":"Dist_update!(\n    model::JuMP.Model,\n    variables::AbstractArray{T,N};\n    weights::Vector{Float64} = zeros(length(variables)),\n    metric::Distances.SemiMetric = Cityblock(),\n) where {T<:Union{VariableRef,AffExpr},N}\n\nUpdate a JuMP model's objective function to include an additional distance term for generating multiple diverse alternatives (as in Modeling to Generate Alternatives).\n\nThis function builds upon a previously defined objective by incrementally adding a distance term between the current solution and a new reference solution. It is typically used after Dist_initial! or a prior call to MGA_Dist_update!.\n\nArguments\n\nmodel::JuMP.Model: the JuMP model being updated to generate further alternatives.\nvariables::AbstractArray{T,N}: the variables to consider in the distance computation.\nweights::Vector{Float64}: optional weights for the distance metric (currently not directly used).\nmetric::Distances.SemiMetric: the distance metric used to compute dissimilarity (default is Cityblock distance).\n\nBehavior\n\nEvaluates the current objective function to retrieve the cumulative distance so far.\nComputes the distance between the current variable values and their previous optimal values.\nUpdates the objective function to maximize the sum of the cumulative and new distances.\nResets the model's objective sense to Max.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.add_solution!-Tuple{NearOptimalAlternatives.MetaheuristicProblem, Metaheuristics.State, Distances.SemiMetric}","page":"Reference","title":"NearOptimalAlternatives.add_solution!","text":"add_solution!(\n    problem::MetaheuristicProblem,\n    result::Metaheuristics.State,\n    metric::Distances.SemiMetric\n)\n\nModify a Metaheuristic problem representing the alternative generating problem for the original LP using a newly found alternative solution. This function can be used when one wants to iteratively run a metaheuristic to find alternative solutions one by one.\n\nArguments:\n\nproblem::MetaheuristicProblem: problem to be modified by adding a solution.\nresult::Metaheuristics.State: result containing the optimal solution to add to the objective function.\nmetric::Distances.SemiMetric: metric used to evaluate distance between alternatives.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.create_alternative_generating_problem!-Union{Tuple{N}, Tuple{T}, Tuple{JuMP.Model, Float64, Vector{JuMP.VariableRef}, AbstractArray{T, N}}} where {T<:Union{JuMP.VariableRef, JuMP.AffExpr}, N}","page":"Reference","title":"NearOptimalAlternatives.create_alternative_generating_problem!","text":"create_alternative_generating_problem!(\n  model::JuMP.Model,\n  optimality_gap::Float64,\n  fixed_variables::Vector{VariableRef},\n  variables::AbstractArray{T,N},\n  weights::Vector{Float64};\n  method::Symbol = :HSJ,\n  metric::Distances.SemiMetric = SqEuclidean(),\n) where {T<:Union{VariableRef,AffExpr},N}\n\nTransform a JuMP model into a model solving its corresponding modelling-for-generating-alternatives problem.\n\nArguments\n\nmodel::JuMP.Model: a solved JuMP model for which alternatives are generated.\noptimality_gap::Float64: the maximum percentage deviation (>= 0) an alternative may have compared to the optimal solution.\nfixed_variables::Vector{VariableRef}=[]: a subset of all variables of model that are not allowed to be changed when seeking for alternatives.\nvariables::AbstractArray{T,N}: the variables of model for which are considered when generating alternatives.\nweights::Vector{Float64}: a vector of weights used to update the objective function.\nmethod::Symbol = :HSJ: the method used to model the problem for generating alternatives.\nmetric::Distances.SemiMetric = SqEuclidean(): the metric used to maximise the difference between alternatives and the optimal solution.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.create_alternative_generating_problem-Tuple{JuMP.Model, Metaheuristics.Algorithm, OrderedCollections.OrderedDict{JuMP.VariableRef, Float64}, Float64, Distances.SemiMetric, Dict{MathOptInterface.VariableIndex, Float64}}","page":"Reference","title":"NearOptimalAlternatives.create_alternative_generating_problem","text":"problem = create_alternative_generating_problem(\n    model::JuMP.Model,\n    algorithm::Metaheuristics.Algorithm,\n    initial_solution::OrderedDict{VariableRef, Float64},\n    optimality_gap::Float64,\n    metric::Distances.SemiMetric,\n    fixed_variables::Dict{VariableRef, Float64}\n)\n\nCreate the Metaheuristic problem representing the alternative generating problem for the original LP.\n\nArguments:\n\nmodel::JuMP.Model: JuMP model representing the original LP.\nalgorithm::Metaheuristics.Algorithm: Metaheuristic algorithm to solve the alternative generating problem.\ninitial_solution::OrderedDict{VariableRef, Float64}: (near-)optimal solution to model, for which alternatives are sought.\noptimality_gap::Float64: maximum gap in objective value between initial_solution and alternative solutions.\nmetric::Distances.SemiMetric: distance metric used to compute distance between alternative solutions and initial_solution.\nfixed_variables::Dict{MOI.VariableIndex, Float64}: solution values for fixed variables of the original problem.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.create_objective-Tuple{JuMP.Model, OrderedCollections.OrderedDict{JuMP.VariableRef, Float64}, Float64, Distances.SemiMetric, Dict{Int64, Int64}, Dict{MathOptInterface.VariableIndex, Float64}}","page":"Reference","title":"NearOptimalAlternatives.create_objective","text":"objective = create_objective(\n    model::JuMP.Model,\n    solution::OrderedDict{JuMP.VariableRef, Float64},\n    optimality_gap::Float64,\n    metric::Distances.SemiMetric,\n    index_map::Dict{Int64, Int64},\n    fixed_variables::Dict{VariableRef, Float64}\n)\n\nCreate an objective function supported by Metaheuristics.jl for the alternative generating problem.\n\nArguments\n\nmodel::JuMP.Model: solved JuMP model of the original lp problem.\nsolution::OrderedDict{JuMP.VariableRef, Float64}: solution value of the original lp problem excluding fixed variables.\noptimality_gap::Float64: maximum difference between objective value of optimal solution and alternative solutions.\nmetric::Distances.SemiMetric: distance metric used to measure distance between solutions.\nindex_map::Dict{Int64, Int64}: dictionary mapping indices in the JuMP/MathOptInterface model to indices of x.\nfixed_variables::Dict{VariableRef, Float64}: dictionary containing the values of the fixed variables.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.extract_bounds-Tuple{JuMP.Model, Dict{Int64, Int64}}","page":"Reference","title":"NearOptimalAlternatives.extract_bounds","text":"bounds = extract_bounds(\n    model::JuMP.Model,\n    index_map::Dict{Int64, Int64}\n)\n\nTransform the bounds from a JuMP Model into a matrix of bounds readable by Metaheuristics.jl.\n\nArguments\n\nmodel::JuMP.Model: solved JuMP model of the original lp problem.\nindex_map::Dict{Int64, Int64}: dictionary mapping indices in the JuMP/MathOptInterface model to indices of x.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.extract_constraint-Tuple{MathOptInterface.ScalarAffineFunction, Vector{Float64}, Dict{Int64, Int64}, Dict{MathOptInterface.VariableIndex, Float64}}","page":"Reference","title":"NearOptimalAlternatives.extract_constraint","text":"constraint = extract_constraint(\n    constraint::MOI.ConstraintFunction,\n    x::Vector{Float64},\n    index_map::Dict{Int64, Int64},\n    fixed_variables::Dict{MOI.VariableIndex, Float64}\n)\n\nConvert a constraint from a MathOptInterface function into a julia function of x. Supports only ScalarAffineFunction and VariableIndex constraints.\n\nArguments\n\nconstraint::MOI.ConstraintFunction: constraint transform into a julia function.\nx::Vector{Float64}: a vector representing an individual in the metaheuristic population.\nindex_map::Dict{Int64, Int64}: a dictionary mapping indices in the MathOptInterface model to indices of x.\nfixed_variables::Dict{MOI.VariableIndex, Float64}: a dictionary containing the values of the fixed variables.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.extract_objective-Tuple{JuMP.AffExpr, Vector{Float64}, Dict{Int64, Int64}, Dict{MathOptInterface.VariableIndex, Float64}}","page":"Reference","title":"NearOptimalAlternatives.extract_objective","text":"objective = extract_objective(\n    objective::JuMP.AffExpr,\n    x::Vector{Float64},\n    index_map::Dict{Int64, Int64},\n    fixed_variables::Dict{MOI.VariableIndex, Float64}\n)\n\nConvert the objective from a MathOptInterface function into a julia function of x. Supports only linear single-objective functions.\n\nArguments\n\nobjective::JuMP.AffExpr: the objective function to transform into a julia function.\nx::Vector{Float64}: a vector representing an individual in the metaheuristic population.\nindex_map::Dict{Int64, Int64}: a dictionary mapping indices in the MathOptInterface model to indices of x.\nfixed_variables::Dict{MOI.VariableIndex, Float64}: a dictionary containing the values of the fixed variables.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.generate_alternatives!-Union{Tuple{N}, Tuple{T}, Tuple{JuMP.Model, Float64, AbstractArray{T, N}, Int64}} where {T<:Union{JuMP.VariableRef, JuMP.AffExpr}, N}","page":"Reference","title":"NearOptimalAlternatives.generate_alternatives!","text":"results = generatealternatives!(   model::JuMP.Model,   optimalitygap::Float64,   variables::AbstractArray{T,N},   nalternatives::Int64;   modelingmethod::Symbol = :MaxDistance,   metric::Distances.SemiMetric = SqEuclidean(),   fixedvariables::Vector{VariableRef} = VariableRef[], ) where {T<:Union{VariableRef,AffExpr},N} Generate n_alternatives solutions to model which are as distant from the optimum and each other, but with a maximum optimality_gap, using optimisation.\n\nArguments\n\nmodel::JuMP.Model: a solved JuMP model for which alternatives are generated.\noptimality_gap::Float64: the maximum percentage deviation (>=0) an alternative may have compared to the optimal solution.\nvariables::AbstractArray{T,N}: the variables of model for which are considered when generating alternatives.\nn_alternatives: the number of alternative solutions sought.\nmodeling_method::Symbol = :Max_Distance: the method used to model the problem for generating alternatives.\nmetric::Distances.Metric=SqEuclidean(): the metric used to maximise the difference between alternatives and the optimal solution.\nfixed_variables::Vector{VariableRef}=[]: a subset of all variables of model that are not allowed to be changed when seeking for alternatives.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.generate_alternatives-Tuple{JuMP.Model, Float64, Int64, Metaheuristics.Algorithm}","page":"Reference","title":"NearOptimalAlternatives.generate_alternatives","text":"result = generate_alternatives(\n  model::JuMP.Model,\n  optimality_gap::Float64,\n  n_alternatives::Int64,\n  metaheuristic_algorithm::Metaheuristics.Algorithm;\n  metric::Distances.Metric = SqEuclidean(),\n  selected_variables::Vector{VariableRef} = []\n)\n\nGenerate n_alternatives solutions to model which are as distant from the optimum and each other, but with a maximum optimality_gap, using a metaheuristic algorithm.\n\nArguments\n\nmodel::JuMP.Model: a solved JuMP model for which alternatives are generated.\noptimality_gap::Float64: the maximum percentage deviation (>=0) an alternative may have compared to the optimal solution.\nn_alternatives: the number of alternative solutions sought.\nmetaheuristic_algorithm::Metaheuristics.Algorithm: algorithm used to search for alternative solutions.\nmetric::Distances.Metric=SqEuclidean(): the metric used to maximise the difference between alternatives and the optimal solution.\nfixed_variables::Vector{VariableRef}=[]: a subset of all variables of model that are not allowed to be changed when seeking for alternatives.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.run_alternative_generating_problem!-Tuple{NearOptimalAlternatives.MetaheuristicProblem}","page":"Reference","title":"NearOptimalAlternatives.run_alternative_generating_problem!","text":"result = run_alternative_generating_problem!(\n    problem::MetaheuristicProblem\n)\n\nOptimise the problem using the specified metaheuristic algorithm and return the result.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.update_objective_function!-Union{Tuple{N}, Tuple{T}, Tuple{JuMP.Model, AbstractArray{T, N}}} where {T<:Union{JuMP.VariableRef, JuMP.AffExpr}, N}","page":"Reference","title":"NearOptimalAlternatives.update_objective_function!","text":"update_objective_function!(\n    model::JuMP.Model,\n    variables::AbstractArray{T,N};\n    weights::Vector{Float64} = zeros(length(variables)),\n    method::Symbol = :HSJ,\n    metric::Distances.SemiMetric = SqEuclidean()) where {T<:Union{VariableRef,AffExpr},N}\n)\n\nAdd a previously found solution to a modelling-for-generating-alternatives problem. Used for iteratively finding multiple alternative solutions.\n\nArguments\n\nmodel::JuMP.Model: a solved JuMP model for which alternatives are generated.\nvariables::AbstractArray{T,N}: the variables of model for which are considered when generating alternatives.\nweights::Vector{Float64}: a vector of weights used to update the objective function.\nmethod::Symbol = :HSJ: the method used to model the problem for generating alternatives.\nmetric::Distances.SemiMetric = SqEuclidean(): the metric used to maximise the difference between alternatives and the optimal solution.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.update_solutions!-Tuple{NearOptimalAlternatives.AlternativeSolutions, JuMP.Model}","page":"Reference","title":"NearOptimalAlternatives.update_solutions!","text":"update_solutions!(results::AlternativeSolutions, model::JuMP.Model)\n\nUpdate the set of results AlternativeSolutions with the variable values obtained when solving the JuMP model model.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#NearOptimalAlternatives.update_solutions!-Tuple{NearOptimalAlternatives.AlternativeSolutions, Metaheuristics.State, OrderedCollections.OrderedDict{JuMP.VariableRef, Float64}, Dict{MathOptInterface.VariableIndex, Float64}, JuMP.Model}","page":"Reference","title":"NearOptimalAlternatives.update_solutions!","text":"update_solutions!(results::AlternativeSolutions, model::JuMP.Model)\n\nUpdate the set of results AlternativeSolutions with the variable values obtained when solving using Metaheuristics.\n\nArguments\n\nresults::AlternativeSolutions: set of solutions to add a new solution to.\nstate::Metaheuristics.State: contains results to metaheuristic solve.\ninitial:solution::OrderedDict{VariableRef, Float64}: used to identify the indices of the metaheuristic solution in the JuMP model.\nfixed_variables::Dict{MOI.VariableIndex, Float64}: set of fixed variables and their solution values.\nmodel::JuMP.Model: original model for which alternative solutions are found.\n\n\n\n\n\n","category":"method"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"#NearOptimalAlternatives","page":"NearOptimalAlternatives","title":"NearOptimalAlternatives","text":"","category":"section"},{"location":"","page":"NearOptimalAlternatives","title":"NearOptimalAlternatives","text":"Documentation for NearOptimalAlternatives.","category":"page"},{"location":"#Contributors","page":"NearOptimalAlternatives","title":"Contributors","text":"","category":"section"},{"location":"","page":"NearOptimalAlternatives","title":"NearOptimalAlternatives","text":"<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->","category":"page"}]
}
